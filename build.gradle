//file:noinspection GroovyAssignabilityCheck
plugins {
    id 'java'
    // Standard Artifact Publish
    id 'maven-publish'
    id 'signing'
    id 'io.codearte.nexus-staging' version '0.30.0'
}
subprojects {
    apply plugin: 'java'
    apply plugin: 'maven-publish'
    apply plugin: 'signing'

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    group = project.maven_group
    version = "${project.mod_version}+${project.minecraft_version}"
    if (project.hasProperty('SNAPSHOT')) {
        version = "${version}-SNAPSHOT"
    }

    tasks.withType(JavaCompile).configureEach {
        it.options.encoding = 'UTF-8'
    }

    javadoc.options.addStringOption('Xdoclint:none', '-quiet')

    nexusStaging {
        packageGroup = project.maven_group
    }

    jar {
        manifest {
            attributes([
                    'Specification-Title'     : archives_base_name,
                    'Specification-Vendor'    : 'The_Fireplace',
                    'Specification-Version'   : project.jar.archiveVersion,
                    'Implementation-Title'    : project.name,
                    'Implementation-Version'  : project.jar.archiveVersion,
                    'Implementation-Vendor'   : 'The_Fireplace',
                    'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                    'Timestampe'              : System.currentTimeMillis(),
                    'Built-On-Java'           : "${System.getProperty('java.vm.version')} (${System.getProperty('java.vm.vendor')})",
                    'Build-On-Minecraft'      : minecraft_version
            ])
        }
        from('LICENSE') {
            rename { "${it}_${archives_base_name}" }
        }
    }

    repositories {
        mavenCentral()

        /*maven {
            name = 'Sponge / Mixin'
            url = 'https://repo.spongepowered.org/repository/maven-public/'
        }*/
    }

    // Disables Gradle's custom module metadata from being published to maven. The
    // metadata includes mapped dependencies which are not reasonably consumable by
    // other mod developers.
    tasks.withType(GenerateModuleMetadata) {
        enabled = false
    }
}